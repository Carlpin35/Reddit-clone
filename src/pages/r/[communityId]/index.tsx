import React, { useEffect } from "react";
import Head from "next/head";
import { firestore } from "../../../firebase/clientApp";
import { doc, getDoc } from "firebase/firestore";
import safeJsonStringify from "safe-json-stringify";
import type { GetServerSidePropsContext } from "next";
import { Community, communityState } from "../../../atoms/communitiesAtom";
import CommunityNotFound from "../../../components/community/CommunityNotFound";
import Header from "../../../components/community/Header";
import PageContent from "../../../components/layout/PageContent";
import CreatePostLink from "../../../components/community/CreatePostLink";
import About from "../../../components/community/About";
import Posts from "../../../components/Posts/Posts";
import { useSetRecoilState } from "recoil";


type CommunityPageProps = {
	communityData: Community;
};

const CommunityPage: React.FC<CommunityPageProps> = ({ communityData }) => {
	const setCommunityStateValue = useSetRecoilState(communityState);
	
	useEffect(() => {
		setCommunityStateValue((prev) => ({
			...prev,
			currentCommunity: communityData,
		}));
	}, [communityData]);

     if (!communityData) {
		return <CommunityNotFound />;
	}


	return (
		<>
			<Head>
				<title>r/{communityData.id} - Reddit</title>
				<meta name="description" content="Generated by create next app" />
				<link
					rel="icon"
					href="https://www.iconpacks.net/icons/2/free-reddit-logo-icon-2436-thumb.png"
				/>
			</Head>

			<Header communityData={communityData} />

			<PageContent>
				<>
					<CreatePostLink />
					<Posts communityData={communityData} />
				</>
				<About communityData={communityData} />
			</PageContent>
		</>
	);
};

export default CommunityPage;

export async function getServerSideProps(context: GetServerSidePropsContext) {
	//get community data
	try {
		const communityDocRef = doc(
			firestore,
			"communities",
			context.query.communityId as string
		);
		const communityDoc = await getDoc(communityDocRef);
		return {
			props: {
				communityData: communityDoc.exists()
					? JSON.parse(
							safeJsonStringify({ id: communityDoc.id, ...communityDoc.data() }) // needed for dates
					  )
					: "",
			},
		};
	} catch (error) {
		console.log("getServerSideProps error", error);
	}
}
